	
Label Root
{
	Son: Market
	Label Market
	{
		Son: Firm
		Label Firm
		{
			Var: _a
			Var: _aGrowth
			Var: _aEnd
			Var: _aNorm
			Var: _s
			Var: _theta
			Var: _age
			Var: _growth
			Var: _incumbent

		}

		Param: MktReg
		Param: ArrivReg
		Param: EntrReg
		Param: InnoProf
		Param: OverlapExit
		Param: A
		Param: aThresh
		Param: sMin
		Param: gamma
		Param: AgeEntrant
		Param: EntrLead
		Param: InitShare
		Var: E
		Var: N
		Var: HHI
		Var: aAvg
		Var: aAvg1
		Var: aAvg2
		Var: aMax
		Var: aGrowthAvg
		Var: aGrowthSD
		Var: aGrowthMax
		Var: ageAvg
		Var: ageMax
		Var: dS
		Var: growthAvg
		Var: growthSD
		Var: growthMax
		Var: adjustShares
		Var: createEntrants
		Var: killIncumbents
		Var: totalFirms
		Var: totalShares

	}

	Param: Mu
	Param: MuMax
	Param: BetaAlpha
	Param: BetaAlphaEntr
	Param: BetaBeta
	Param: BetaBetaEntr
	Param: BetaMin
	Param: BetaMinEntr
	Param: BetaMax
	Param: BetaMaxEntr
	Param: LaplaceAlpha1
	Param: LaplaceAlpha2
	Param: LognormLoc
	Param: LognormScale
	Param: NormalSD
	Param: UniformMin
	Param: UniformMinEntr
	Param: UniformMax
	Param: UniformMaxEntr
	Func: betaInnoDraw
	Func: betaInnoDrawEntr
	Func: betaRescInnoDraw
	Func: laplaceInnoDraw
	Func: lognormInnoDraw
	Func: InnoShock
	Func: normalInnoDraw
	Func: poissonInnoDraw
	Func: uniformInnoDraw
	Func: uniformDrawEntr
	Var: init

}


DATA

Object: Root C	1
Param: Mu 0 n + n n	0.05
Param: MuMax 0 n + n n	0.2
Param: BetaAlpha 0 n + n n	1
Param: BetaAlphaEntr 0 n + n n	1
Param: BetaBeta 0 n + n n	5
Param: BetaBetaEntr 0 n + n n	5
Param: BetaMin 0 n + n n	0
Param: BetaMinEntr 0 n + n n	0
Param: BetaMax 0 n + n n	0.3
Param: BetaMaxEntr 0 n + n n	0.3
Param: LaplaceAlpha1 0 n + n n	0.01
Param: LaplaceAlpha2 0 n + n n	0.015
Param: LognormLoc 0 n + n n	-3.5
Param: LognormScale 0 n + n n	1
Param: NormalSD 0 n + n n	0.8
Param: UniformMin 0 n + n n	-0.05
Param: UniformMinEntr 0 n + n n	0
Param: UniformMax 0 n + n n	0.15
Param: UniformMaxEntr 0 n + n n	0.1
Func: betaInnoDraw 0 n + n n
Func: betaInnoDrawEntr 0 n + n n
Func: betaRescInnoDraw 0 n + n n
Func: laplaceInnoDraw 0 n + n n
Func: lognormInnoDraw 0 n + n n
Func: InnoShock 0 n + n n
Func: normalInnoDraw 0 n + n n
Func: poissonInnoDraw 0 n + n n
Func: uniformInnoDraw 0 n + n n
Func: uniformDrawEntr 0 n + n n
Var: init 0 n + n n

Object: Market C	1
Param: MktReg 0 n + n n	2
Param: ArrivReg 0 n + n n	0
Param: EntrReg 0 n + n n	2
Param: InnoProf 0 n + n n	6
Param: OverlapExit 0 n + n n	0
Param: A 0 n + n n	1
Param: aThresh 0 n + n n	0
Param: sMin 0 n + n n	0.001
Param: gamma 0 n + n n	1
Param: AgeEntrant 0 n + n n	1
Param: EntrLead 0 n + n n	0
Param: InitShare 0 n + n n	0
Var: E 0 s + n n
Var: N 1 s + n n	150
Var: HHI 0 s + n n
Var: aAvg 0 s + n n
Var: aAvg1 0 n + n n
Var: aAvg2 0 n + n n
Var: aMax 1 s + n n	0
Var: aGrowthAvg 0 s + n n
Var: aGrowthSD 0 s + n n
Var: aGrowthMax 0 s + n n
Var: ageAvg 0 s + n n
Var: ageMax 0 s + n n
Var: dS 0 s + n n
Var: growthAvg 0 s + n n
Var: growthSD 0 s + n n
Var: growthMax 0 s + n n
Var: adjustShares 0 n + n n
Var: createEntrants 0 n + n n
Var: killIncumbents 0 n + n n
Var: totalFirms 1 s + n n	0
Var: totalShares 0 n + n n

Object: Firm C	1
Var: _a 1 n + n n	0
Var: _aGrowth 0 s + n n
Var: _aEnd 1 s + n n	0
Var: _aNorm 0 s + n n
Var: _s 1 s + n n	0
Var: _theta 0 n + n n
Var: _age 1 n + n n	0
Var: _growth 0 s + n n
Var: _incumbent 1 n + n n	0

SIM_NUM 1
SEED 1
MAX_STEP 200
EQUATION fun_FatTail.cpp
MODELREPORT modelreport.html

DESCRIPTION

Object_Root

END_DESCRIPTION

Parameter_Mu
Innovation expected average increase in productivity
_INIT_
All 1 instances equal to 0.05.
END_DESCRIPTION

Parameter_MuMax
Maximum value to be generated by the draw functions
_INIT_
All 1 instances equal to 0.2.
END_DESCRIPTION

Parameter_BetaAlpha
Alpha (first) parameter of Beta distribution
_INIT_
All 1 instances equal to 1.
END_DESCRIPTION

Parameter_BetaAlphaEntr
Beta distribution alpha parameter for entry only
_INIT_
All 1 instances equal to 1.
END_DESCRIPTION

Parameter_BetaBeta
Beta (second) parameter of Beta distribution
_INIT_
All 1 instances equal to 5.
END_DESCRIPTION

Parameter_BetaBetaEntr
Beta distribution beta parameter for entry only
_INIT_
All 1 instances equal to 5.
END_DESCRIPTION

Parameter_BetaMin
Inferior support to beta function (if applicable)
_INIT_
All 1 instances equal to 0.
END_DESCRIPTION

Parameter_BetaMinEntr
Inferior support for drawing from beta distribution (entrants only)
_INIT_
All 1 instances equal to 0.
END_DESCRIPTION

Parameter_BetaMax
Superior support to beta function (if applicable)
_INIT_
All 1 instances equal to 0.3.
END_DESCRIPTION

Parameter_BetaMaxEntr
Superior support for drawing from beta distribution (entrants only)
_INIT_
All 1 instances equal to 0.3.
END_DESCRIPTION

Parameter_LaplaceAlpha1

_INIT_
All 1 instances equal to 0.01.
END_DESCRIPTION

Parameter_LaplaceAlpha2

_INIT_
All 1 instances equal to 0.015.
END_DESCRIPTION

Parameter_LognormLoc
The scale parameter to be used in lognormal distribution draws
_INIT_
All 1 instances equal to -3.5.
END_DESCRIPTION

Parameter_LognormScale
The scale parameter to be used in lognormal distribution draws
_INIT_
All 1 instances equal to 1.
END_DESCRIPTION

Parameter_NormalSD
standard deviation of normal draws (standardized by the average InnoAvg)
_INIT_
All 1 instances equal to 0.8.
END_DESCRIPTION

Parameter_UniformMin
Lower value of uniform distribution (for incumbent productivity shocks)
_INIT_
All 1 instances equal to -0.05.
END_DESCRIPTION

Parameter_UniformMinEntr

_INIT_
All 1 instances equal to 0.
END_DESCRIPTION

Parameter_UniformMax
Upper value of uniform distribution (for incumbent productivity shocks)
_INIT_
All 1 instances equal to 0.15.
END_DESCRIPTION

Parameter_UniformMaxEntr

_INIT_
All 1 instances equal to 0.1.
END_DESCRIPTION

Function_betaInnoDraw

END_DESCRIPTION

Function_betaInnoDrawEntr

END_DESCRIPTION

Function_betaRescInnoDraw

END_DESCRIPTION

Function_laplaceInnoDraw

END_DESCRIPTION

Function_lognormInnoDraw

END_DESCRIPTION

Function_InnoShock

END_DESCRIPTION

Function_normalInnoDraw

END_DESCRIPTION

Function_poissonInnoDraw

END_DESCRIPTION

Function_uniformInnoDraw

END_DESCRIPTION

Function_uniformDrawEntr

END_DESCRIPTION

Variable_init
Model initial setup

'init' appears in the equation for: (Never Used).
END_DESCRIPTION

Object_Market
(no description available )
END_DESCRIPTION

Parameter_MktReg
Market regime options:
1) Mk I (no productivity growth)
2) intermediate (productivity growth without cummulativity)
3) Mk II  (productivity growth without cummulativity)
_INIT_
All 1 instances equal to 2.
END_DESCRIPTION

Parameter_ArrivReg
Arrival regime options:
0) Innovation shock around market productivity average (M+M)
1) Innovation shock over market technological frontier (best incumbent) (K+S)
END_DESCRIPTION

Parameter_EntrReg
Entry regime options:
0) No entry
1) Free entry
n) n fixed firms (entrants replace failed incumbents)
_INIT_
All 4 instances equal to 150.
END_DESCRIPTION

Parameter_InnoProf
Innovation shock profile (distribution) options: 
1) Beta
2) asymmetric Laplace
3) Poisson
4) Gaussian (normal)
_INIT_
All 1 instances equal to 6.
END_DESCRIPTION

Parameter_OverlapExit
Enable overlapping data from exiting incumbets with new entrants. If disabled, exiting incumbent data is marked as invalid (e.g. -999) to be removed during analysis.
_INIT_
All 1 instances equal to 0.
END_DESCRIPTION

Parameter_A
Intensity of market selection in replicator equation
_INIT_
All 1 instances equal to 1.
END_DESCRIPTION

Parameter_aThresh
Average productivity multiplier threshold, firms below that quit market
_INIT_
All 4 instances equal to 0.
END_DESCRIPTION

Parameter_sMin
Minimum market share to stay in market
_INIT_
All 1 instances equal to 0.001.
END_DESCRIPTION

Parameter_gamma
Matthew effect intensity (0=no effect)
_INIT_
All 5 instances increasing from 1 with steps 0.5. The value is increased every 1 instances.
END_DESCRIPTION

Parameter_AgeEntrant
Maximum age of a firm to be considered an entrant
_INIT_
All 1 instances equal to 1.
END_DESCRIPTION

Parameter_EntrLead
Average entrant lead over technological frontier (maximum productivity)
_INIT_
All 1 instances equal to 0.
END_DESCRIPTION

Parameter_InitShare
Initial market share of entrants
_INIT_
All 1 instances equal to 0.
END_DESCRIPTION

Variable_E
Number of entrant firms
END_DESCRIPTION

Variable_N
Number of incumbent firms in market
_INIT_
All 1 instances equal to 150.
END_DESCRIPTION

Variable_HHI
Herfundahl-Hirschman concentration index corrected for the number of firms
END_DESCRIPTION

Variable_aAvg
Average weighted productivity
END_DESCRIPTION

Variable_aAvg1

END_DESCRIPTION

Variable_aAvg2

END_DESCRIPTION

Variable_aMax
Technological frontier (maximum productivity)
_INIT_
All 1 instances equal to 1.
END_DESCRIPTION

Variable_aGrowthAvg
Average productivity growth rate
END_DESCRIPTION

Variable_aGrowthSD
Standard deviation of productivity growth rate
END_DESCRIPTION

Variable_aGrowthMax
Maximum productivity growth rate
END_DESCRIPTION

Variable_ageAvg
Average firm age
END_DESCRIPTION

Variable_ageMax
Maximum firm age
END_DESCRIPTION

Variable_dS
Sum of the delta market share index
END_DESCRIPTION

Variable_growthAvg
Average market share growth rate
END_DESCRIPTION

Variable_growthSD
Standard deviation of market share growth rate
END_DESCRIPTION

Variable_growthMax
Maximum market share growth rate
END_DESCRIPTION

Variable_adjustShares

END_DESCRIPTION

Variable_createEntrants

END_DESCRIPTION

Variable_killIncumbents

END_DESCRIPTION

Variable_totalFirms
Total number of firms
_INIT_
All 4 instances equal to 150.
END_DESCRIPTION

Variable_totalShares

END_DESCRIPTION

Object_Firm
(no description available )
END_DESCRIPTION

Variable__a

_INIT_
All 150 instances equal to 0.
END_DESCRIPTION

Variable__aGrowth

END_DESCRIPTION

Variable__aEnd

_INIT_
All 150 instances equal to 0.
END_DESCRIPTION

Variable__aNorm

END_DESCRIPTION

Variable__s

_INIT_
All 150 instances equal to 0.
END_DESCRIPTION

Variable__theta

END_DESCRIPTION

Variable__age

_INIT_
All 150 instances equal to 0.
END_DESCRIPTION

Variable__growth

END_DESCRIPTION

Variable__incumbent

_INIT_
All 150 instances equal to 0.
END_DESCRIPTION


DOCUOBSERVE

END_DOCUOBSERVE


DOCUINITIAL

END_DOCUINITIAL


EQ_FILE
#include "fun_head.h"

double betadev( double, double );					// function declaration is required in C
double laplace( double, double );

MODELBEGIN

/*
 RANDOM EVENT
*/

FUNCTION("betaDrawResult")								// It's right but better declare it as a FUNCTION because
/*																	// this CANNOT be a variable, that has 1 value per timestep
Draw a random number from a beta distribution using two fixed parameters
that can be the same for all objects or different for each one (according
to the configuration set in LSD Manager
*/

v[0] = V("alpha");												// get the appropriate values for alfa and beta
v[1] = V("beta");

RESULT( betadev( v[0], v[1]))


FUNCTION("laplaceDrawResult")					// Same as above

v[0] = V("alpha1");
v[1] = V("alpha2");

RESULT (laplace (v[0],v[1]))


/*
REPLICATOR DYNAMIC
*/

EQUATION("Share")													// GOOD
/*
 Level of shares, computed as the past shares plus a share of the
difference of prudctivity in respect of the average productivity
*/

v[0]= V("Productivity");
v[1]= V("A");
v[2]= VL("Share",1);
v[3]= V("AvProductivity");

v[4]=v[2]*(1+v[1]*(v[0]-v[3])/v[3]);

RESULT(v[4])


EQUATION("AvProductivity")				// GOOD see comments to cosmetic improvements
/*
Average Productivity weighted with the value of shares
*/

v[0]=0;
v[1]=0; 

CYCLE(cur, "Firm")
{
  v[2]=VS(cur,"Productivity");
  v[3]=VLS(cur,"Share",1);     // do we need this?
  
  v[0]=v[0]+v[2]*v[3];
  v[1]=v[1]+v[3];													 // do we need this? Should add to 1!
}

RESULT(v[0]/v[1])


EQUATION("MarkI")
/*
Productivity Dynamics: Scumpeter Mark I regime
No learning process for incumbent: constant productivity over time 
*/

v[0]=VL("MarkI",1);

RESULT(v[0])


EQUATION("IntermediateRegime")
/*
Productivity Dynamics: Intermediate regime
Learning process determined by an extraction from an asymmetric Laplace
*/

v[0]=V("laplaceDrawResult");
v[1]=VL("IntermediateRegime",1);

v[2]=v[1]*(1+v[0]);

RESULT(v[2])


EQUATION("MarkII")
/*
Productivity dynamics: Matthew effect in the learning process of incumbents
*/

v[0]=V("pi");
v[1]=VL("MarkII",1);

v[2]=v[1]*(1+v[0]);

RESULT(v[2])


EQUATION("pi")																		// GOOD
/*
Extant competitiveness (eq. 9)
*/

v[0]=V("betaDrawResult");
v[1]=VL("MarkII",1);
v[2]=V("AvProductivityI");

v[3]=v[0]*(v[1]/v[2]);

RESULT(v[3])


EQUATION("AvProductivityI")									// POTENTIAL PROBLEM logically ok but complicate things
/*
Average Productivity weighted with the value of shares and past productivity. Only for MarkII
*/

v[0]=0;
v[1]=0; 

CYCLE(cur, "Firm")
{
  v[2]=VLS(cur,"MarkII",1);									// Even if you need it only in Mk II, it's better
																		// to compute for all regimes, so you can have
																		// just one type of "Firm" object
  v[3]=VLS(cur,"Share",1);										// again, not necessary
  
  v[0]=v[0]+v[2]*v[3];
  v[1]=v[1]+v[3];																		// adds up to 1 so...
}

RESULT(v[0]/v[1])


EQUATION("Productivity")												// GOOD well done, with a comment
/*
This equation specifies the dynamic of the productivity in the three regimes
*/

v[0]=V("Incumbent"); // is the firm an incumbent?

if(v[0]==1) 
  v[1]=V("ProdIncumbent");
else
  v[1]=V("ProdEntrant");   									// this can create productivity jumps from t=1 to t=2 (up/down)
																		// is this reasonable theoretically?   
RESULT(v[1])


EQUATION("Incumbent")															// PROBLEM should be a logical variable (true/false)
/*
This equation determines who are the incumbents
*/

v[0]=V("age");

if (v[0]>2)																		// make the 2 a parameter, so we can play with it
//  v[1]=V("Incumbent");												// using its own contemporaneous value: deadlock!
	v[1]=true;																	// simply, if more than 2 years old, YES, it's an incumbent
else
//  v[1]=V("Entrant");														// this is the number of entrants in t, not related
	v[1]=false;
  
RESULT(v[1])  


EQUATION("ProdIncumbent")											// GOOD well done
/*
This equation specifies the dynamic of the productivity in the three regimes
*/
v[0]=V("regime");

if (v[0]==1)
  v[1]=V("MarkI");
  
if (v[0]==2)
  v[1]=V("IntermediateRegime");
  
if (v[0]==3)
  v[1]=V("MarkII");
  
RESULT(v[1])


FUNCTION("ProdEntrant")														// Since it's calculated for each entrant, should be a FUNCTION
/*
Learning process only for entrants equal among the three regimes
*/

v[0]=V("betaDrawResult");
v[1]=V("AvProductivity");

RESULT(v[0]*v[1])


EQUATION("Entrants")																	// GOOD but added an s to the name to make it more clear
/*
Entry Process occurs according to a proportion on the number of incumbent in the previous period
*/

v[0]=V("RE");
v[1]=VL("Incumbent",1);

v[2]=v[0]*v[1];																		// this is a real number but we need an integer
v[2]=round(v[2]);																		// so it's better to round it to avoid truncation

RESULT(v[2])


EQUATION("RE")																		// GOOD
/*
A random event from a uniform distribution
*/

v[0]=V("min");
v[1]=V("Max");

v[2]=UNIFORM(v[0],v[1]);

RESULT(v[2])


EQUATION("age")																		// GOOD
/*
This equation counts the age of the firm
*/

v[0]=VL("age",1);
v[0]++;

RESULT(v[0])


EQUATION( "createEntrants" )
/*
Create as many new entrant firm objects as indicated by "Entrants"
*/

v[0] = V( "Entrants" );																		// how many objects to create

for ( v[1]=1; v[1] <= v[0] ; v[1]++ )				// do one at a time
{
	v[1] = V( "ProdEntrant" );													// draw a productivity for the entrant

  cur = ADDOBJ( "Firm" );																// create a new "Firm" object in the current market
  
  WRITES( cur, "age", 0 );															// set age to 0
  WRITES( cur, "Incumbent", false );					// set as not an incumbent
  WRITES( cur, "Productivity", v[1] );			// set initial productivity
}

RESULT( 1 )



MODELEND



void close_sim(void)
{

}


/*
 *  betadev.cpp
 *  double betadev(double alfa, double beta, long *idum)
 *  
 *  Returns a Beta(alfa,beta) distributed deviate, using ran1(idum)
 *  as the source of uniform deviates.
 *
 */

//#include "math.h"  // Not necessary, already included in fun_head.h above
double betadev(double alfa, double beta)

{
  double U,V,den;
	den=0;
	U=UNIFORM(0,1); // change with the lsd uniform random generator
	V=UNIFORM(0,1); 
	den=pow(U,(1/alfa))+pow(V,(1/beta));
	
	while (den<=0 || den >1)
	{
		den=0;
		U=UNIFORM(0,1);
		V=UNIFORM(0,1);
		den=pow(U,(1/alfa))+pow(V,(1/beta));
	}
	return pow(U,(1/alfa))/den;
}



/*
 * Laplace distribution: should return a laplace distribution

 */
double laplace(double alpha1, double alpha2)
{
  double X;
  if(UNIFORM(0,1)<(alpha1/(alpha1+alpha2))){
X = alpha1*log(UNIFORM(0,1)*(1+alpha1/alpha2));
}
else 
{
X = -alpha2*log((1-UNIFORM(0,1))*(1+alpha1/alpha2));
}
return X;

}


END_EQ_FILE
